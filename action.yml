name: "HTTPTests Runner"
description: "Automated HTTP integration testing with Docker isolation - test APIs, proxies, and microservices in CI/CD"
author: "HTTPTests"
branding:
  icon: "check-circle"
  color: "green"

inputs:
  working-directory:
    description: "Directory to start scanning from"
    required: false
    default: "."
  python-version:
    description: "Python version to use"
    required: false
    default: "3.x"

runs:
  using: "composite"
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip -q
        pip install PyYAML requests -q

    - name: Generate and run suites
      shell: bash
      env:
        WORKDIR: ${{ inputs.working-directory }}
      run: |
        set -euo pipefail

        scan_root="${WORKDIR}"
        echo "Scanning for .httptests under: ${scan_root}"

        mapfile -t suites < <(find "${scan_root}" -type d -name .httptests | sort)
        if [[ ${#suites[@]} -eq 0 ]]; then
          echo "No .httptests directories found under ${scan_root}. Exiting."
          exit 1
        fi

        # Ensure generator is available
        gen_script_path="${GITHUB_ACTION_PATH}/generate_docker_compose.py"
        echo "Using generator: ${gen_script_path}"

        status_overall=0

        for suite_dir in "${suites[@]}"; do
          echo -e "\n=== Processing suite: ${suite_dir} ==="
          suite_parent="$(dirname "${suite_dir}")"
          compose_file="${suite_dir}/docker-compose.yml"
          test_file="${suite_dir}/test.json"
          
          # Generate project name, handling edge cases
          suffix="$(echo "${suite_parent}" | tr '/\\' '_' | tr -cd '[:alnum:]_-' | tr '[:upper:]' '[:lower:]' | sed 's/[_-]*$//' | sed 's/^[_-]*//')"
          if [[ -z "${suffix}" || "${suffix}" == "." ]]; then
            project_name="httptests"
          else
            project_name="httptests-${suffix}"
          fi

          if [[ ! -f "${test_file}" ]]; then
            echo "Warning: Missing test.json in ${suite_dir}, skipping."
            continue
          fi

          # Generate docker-compose.yml
          if ! python "${gen_script_path}" --suite "${suite_dir}" --output "${compose_file}" 2>&1; then
            echo "❌ ERROR: Failed to generate docker-compose.yml"
            status_overall=1
            continue
          fi

          echo "📦 Starting Docker services..."
          if ! docker compose -f "${compose_file}" -p "${project_name}" up -d --build 2>&1; then
            echo "❌ ERROR: Failed to start Docker containers"
            echo "Docker container status:"
            docker ps -a --filter "name=${project_name}" 2>&1 || true
            status_overall=1
            continue
          fi

          echo "🧪 Running tests for ${project_name}"
          if ! python "${GITHUB_ACTION_PATH}/main.py" --test-file "${test_file}"; then
            status_overall=$?
            echo ""
            echo "❌ Tests failed! Showing container logs for debugging:"
            echo ""
            echo "=== Container Status ==="
            docker ps -a --filter "name=${project_name}" 2>&1 || true
            echo ""
            echo "=== Nginx Container Logs ==="
            docker logs httptests_nginx 2>&1 || echo "Could not retrieve nginx logs"
            echo ""
            echo "=== Mock Container Logs ==="
            docker logs httptests_mock 2>&1 || echo "Could not retrieve mock logs"
            echo ""
          fi

          echo "🧹 Cleaning up Docker services..."
          docker compose -f "${compose_file}" -p "${project_name}" down -v 2>&1 || true
        done

        exit ${status_overall}

